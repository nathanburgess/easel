[1mdiff --cc src/brushes/BaseBrush.mjs[m
[1mindex 27feac4,4c6818a..0000000[m
[1m--- a/src/brushes/BaseBrush.mjs[m
[1m+++ b/src/brushes/BaseBrush.mjs[m
[36m@@@ -2,26 -2,47 +2,58 @@@[m
   * The base class for all brushes[m
   */[m
  export default class BaseBrush {[m
[31m-     constructor(options = {}) {[m
[31m-         let defaults = {[m
[31m-             color       : "white",[m
[31m-             borderColor : "transparent",[m
[31m-             borderSize  : 0[m
[31m-         };[m
[32m+     /**[m
[32m+      * Construct a Brush[m
[32m+      *[m
[32m+      * @param {Object} options - The settings to apply to the Brush[m
[32m+      * @param {Object} defaults - Some default settings[m
[32m+      */[m
[32m+     constructor(options = {}, defaults = {}) {[m
[32m+         this.context = undefined;[m
[32m+ [m
[32m+         // Add some global brush defaults that may or may not be set in individual brushes[m
[32m+         defaults = Object.assign({[m
[32m+             color        : "white",[m
[32m+             borderColor  : "transparent",[m
[32m+             borderSize   : 0,[m
[32m+             borderRadius : 0,[m
[32m+         }, defaults);[m
  [m
[32m+         // Calculate the initial bounding box of this brush[m
[32m+         this.bounds = {[m
[32m+             top    : options.context.canvas.width,[m
[32m+             right  : 0,[m
[32m+             bottom : 0,[m
[32m+             left   : options.context.canvas.height[m
[32m+         };[m
[32m++        [m
[32m +        this.borderSpecs = {[m
[32m +            tLeft : 0,[m
[32m +            tRight : 0,[m
[32m +            bRight : 0,[m
[32m +            bLeft : 0,[m
[32m +            tLeftE : 0,[m
[32m +            tRightE : 0,[m
[32m +            bRightE : 0,[m
[32m +            bLeftE : 0, [m
[32m +        };[m
  [m
[32m+         this.center = {[m
[32m+             x : options.context.canvas.width * 0.5,[m
[32m+             y : options.context.canvas.height * 0.5[m
[32m+         };[m
[32m+ [m
[32m+         // Jobs are operations that may take some undetermined amount of time to finish. These are tracked so[m
[32m+         // that they can be checked and waited on before performing a save[m
[32m+         this.jobs = [];[m
[32m+ [m
[32m+         // Due to the nature of transformations, certain operations must happen in a certain order. Separating[m
[32m+         // these operations out into their own specific arrays allows an easier way of ensuring proper order.[m
[32m+         this.rotations = [];[m
[32m+ [m
[32m+         this.copies = [];[m
  [m
[31m-         this.bounds = {};[m
[32m+         // Lastly, run the final step of initialization on the Brush[m
          this.assignOptions(defaults, options);[m
      }[m
  [m
[36m@@@ -63,91 -188,34 +200,101 @@@[m
          return this;[m
      }[m
  [m
[32m +    radParse(x) {[m
[32m +        var arr = x.split(" ");[m
[32m +[m
[32m +        if(arr.indexOf('/') !== -1 ) {[m
[32m +            var arrE = arr.slice(arr.indexOf('/')+1, arr.length);[m
[32m +            arrE = arrE.map(x => Number.parseInt(x));[m
[32m +            let tre;[m
[32m +            let bre;[m
[32m +            let ble;[m
[32m +[m
[32m +            if(arrE.length === 1) {[m
[32m +                tre = bre = ble = arrE[0];[m
[32m +            }[m
[32m +            else if(arrE.length === 2){[m
[32m +                bre = arrE[0];[m
[32m +                tre = ble = arrE[1];[m
[32m +            }[m
[32m +            else if(arrE.length === 3){[m
[32m +                tre = ble = arrE[1];[m
[32m +                bre = arrE[2];[m
[32m +            }[m
[32m +            else if(arrE.length ===4) {[m
[32m +                tre = arrE[1];[m
[32m +                bre = arrE[2];[m
[32m +                ble = arrE[3];[m
[32m +            }[m
[32m +[m
[32m +            this.borderSpecs.tLeftE = arrE[0];[m
[32m +            this.borderSpecs.tRightE = tre;[m
[32m +            this.borderSpecs.bRightE = bre;[m
[32m +            this.borderSpecs.bLeftE = ble;[m
[32m +        }[m
[32m +        [m
[32m +        arr = arr.slice(0, arr.indexOf('/'));[m
[32m +        arr = arr.map(x => Number.parseInt(x));[m
[32m +        let tr;[m
[32m +        let br;[m
[32m +        let bl;[m
[32m +[m
[32m +        if(arr.length === 1){[m
[32m +            tr = br = bl = arr[0];[m
[32m +        }[m
[32m +        else if(arr.length === 2){[m
[32m +            br = arr[0];[m
[32m +            tr = bl = arr[1];[m
[32m +        }[m
[32m +        else if(arr.length === 3){[m
[32m +            tr = bl = arr[1];[m
[32m +            br = arr[2];[m
[32m +        }[m
[32m +        else if(arr.length === 4){[m
[32m +            tr = arr[1];[m
[32m +            br = arr[2];[m
[32m +            bl = arr[3];[m
[32m +        }[m
[32m +[m
[32m +        this.borderSpecs.tLeft = arr[0];[m
[32m +        this.borderSpecs.tRight = tr;[m
[32m +        this.borderSpecs.bRight = br;[m
[32m +        this.borderSpecs.bLeft = bl;[m
[32m +[m
[32m +        console.log(arr);[m
[32m +        console.log(arrE);[m
[32m +        console.log(this.borderSpecs);[m
[32m +    }[m
[32m +[m
[32m +[m
[32m+     rotate(angle) {[m
[32m+         this.rotations.push(angle * 0.017453292519943295);[m
[32m+     }[m
[32m+ [m
      preRender() {[m
          this.context.save();[m
[32m+ [m
[32m+         // Apply the rotations[m
[32m+         this.rotations.forEach(angle => {[m
[32m+             this.context.translate(this.center.x, this.center.y);[m
[32m+             this.context.rotate(angle);[m
[32m+             this.context.translate(-this.center.x, -this.center.y);[m
[32m+         });[m
[32m+ [m
[32m+         // Establish the drawing space[m
[32m+         this.context.roundRect(this.x, this.y, this.width, this.height, this.borderRadius);[m
[32m+ [m
[32m+         // Set the fill style[m
          this.context.fillStyle = this.color;[m
[32m+         if (this.color.constructor.name.indexOf("Gradient") !== -1)[m
[32m+             this.context.fillStyle = this.color.render();[m
[32m+         if (this.fillStyle) this.context.fill();[m
[32m+     }[m
  [m
[31m-         console.log(this.bounds);[m
[31m-         let halfBorder = this.borderSize*0.5;[m
[31m-         this.bounds.left -= halfBorder;[m
[31m-         this.bounds.right += halfBorder;[m
[31m-         this.bounds.top -= halfBorder;[m
[31m-         this.bounds.bottom += halfBorder;[m
[31m-         console.log(this.bounds);[m
[31m- [m
[31m-         if (this.color.constructor.name.indexOf("Gradient") !== -1) {[m
[31m-             this.color.recenter(this.width * 0.5 + this.x, this.height * 0.5 + this.y);[m
[31m-             this.context.fillStyle = this.color.resize(this.width, this.height).render();[m
[31m-         }[m
[31m-         this.context.strokeStyle = this.borderColor;[m
[31m-         this.context.lineWidth   = this.borderSize;[m
[32m+     async render() {[m
[32m+         this.preRender();[m
[32m+         await this.paint();[m
[32m+         this.postRender();[m
      }[m
  [m
      postRender() {[m
